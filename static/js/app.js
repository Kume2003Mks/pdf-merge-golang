const fileInput = document.getElementById('pdfFiles');
const singleFileInput = document.getElementById('singleFileInput');
const fileList = document.getElementById('fileList');
const selectedFiles = document.getElementById('selectedFiles');
const form = document.getElementById('mergeForm');
const loading = document.getElementById('loading');
const result = document.getElementById('result');

// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå
let selectedFilesList = [];

fileInput.addEventListener('change', function() {
    handleMultipleFiles(this.files);
});

singleFileInput.addEventListener('change', function() {
    if (this.files.length > 0) {
        addSingleFile(this.files[0]);
        this.value = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    }
});

function selectMultipleFiles() {
    fileInput.click();
}

function selectSingleFile() {
    singleFileInput.click();
}

function handleMultipleFiles(files) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å file input
    for (let i = 0; i < files.length; i++) {
        addSingleFile(files[i]);
    }
    fileInput.value = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ input
}

function addSingleFile(file) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isDuplicate = selectedFilesList.some(existingFile => 
        existingFile.name === file.name && existingFile.size === file.size
    );
    
    if (isDuplicate) {
        showResult('error', `‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`);
        return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (file.type !== 'application/pdf' && !file.name.toLowerCase().endsWith('.pdf')) {
        showResult('error', `‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå PDF`);
        return;
    }
    
    selectedFilesList.push(file);
    displaySelectedFiles();
}

function removeFile(index) {
    selectedFilesList.splice(index, 1);
    displaySelectedFiles();
    if (selectedFilesList.length === 0) {
        result.style.display = 'none';
    }
}

function displaySelectedFiles() {
    const fileCountElement = document.getElementById('fileCount');
    
    if (selectedFilesList.length > 0) {
        fileList.style.display = 'block';
        selectedFiles.innerHTML = '';
        
        selectedFilesList.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-item-content">
                    üìÑ ${file.name} (${formatFileSize(file.size)})
                </div>
                <button type="button" class="file-remove-btn" onclick="removeFile(${index})" title="‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ">
                    ‚úï
                </button>
            `;
            selectedFiles.appendChild(fileItem);
        });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (fileCountElement) {
            fileCountElement.textContent = selectedFilesList.length;
        }
    } else {
        fileList.style.display = 'none';
    }
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function clearFiles() {
    selectedFilesList = [];
    fileInput.value = '';
    singleFileInput.value = '';
    fileList.style.display = 'none';
    result.style.display = 'none';
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î URLs ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    cleanupUrls();
}

form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (selectedFilesList.length < 2) {
        showResult('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÑ‡∏ü‡∏•‡πå');
        return;
    }

    const formData = new FormData();
    selectedFilesList.forEach(file => {
        formData.append('files', file);
    });

    loading.style.display = 'block';
    result.style.display = 'none';

    try {
        const response = await fetch('/merge', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            // ‡∏ñ‡πâ‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Content-Disposition header ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            const contentDisposition = response.headers.get('Content-Disposition');
            let filename = 'merged_pdf.pdf';
            if (contentDisposition) {
                const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                if (filenameMatch && filenameMatch[1]) {
                    filename = filenameMatch[1].replace(/['"]/g, '');
                }
            }
            
            // ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ cleanup ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
            createdUrls.push(url);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            showResult('success', `‡∏£‡∏ß‡∏° PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏ß‡∏° ${selectedFilesList.length} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                <div style="margin-top: 15px;">
                    <p style="margin-bottom: 10px;"><strong>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå:</strong></p>
                    <ul style="text-align: left; margin: 10px 0; padding-left: 20px;">
                        <li><strong>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:</strong> ${filename}</li>
                        <li><strong>‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:</strong> ${formatFileSize(blob.size)}</li>
                        <li><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°:</strong> ${selectedFilesList.length} ‡πÑ‡∏ü‡∏•‡πå</li>
                    </ul>
                    <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; margin-top: 15px;">
                        <a href="${url}" download="${filename}" class="download-btn" style="
                            display: inline-block; 
                            padding: 12px 24px; 
                            background: #28a745; 
                            color: white; 
                            text-decoration: none; 
                            border-radius: 8px; 
                            font-weight: bold;
                            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                            transition: all 0.3s ease;
                        " onmouseover="this.style.background='#218838'" onmouseout="this.style.background='#28a745'">
                            üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF
                        </a>
                        <button onclick="previewPDF('${url}')" class="preview-btn" style="
                            padding: 12px 24px; 
                            background: #007bff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            font-weight: bold; 
                            cursor: pointer;
                            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                            transition: all 0.3s ease;
                        " onmouseover="this.style.background='#0056b3'" onmouseout="this.style.background='#007bff'">
                            üëÅÔ∏è ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PDF
                        </button>
                    </div>
                </div>`);
        } else {
            // ‡∏ñ‡πâ‡∏≤ response ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            const data = await response.json();
            showResult('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (data.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'));
        }
    } catch (error) {
        showResult('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ' + error.message);
    } finally {
        loading.style.display = 'none';
    }
});

function showResult(type, message) {
    result.className = 'result ' + type;
    result.innerHTML = message;
    result.style.display = 'block';
}

// ‡πÄ‡∏Å‡πá‡∏ö URLs ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ cleanup
let createdUrls = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î memory
function cleanupUrls() {
    createdUrls.forEach(url => {
        URL.revokeObjectURL(url);
    });
    createdUrls = [];
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
window.addEventListener('beforeunload', cleanupUrls);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PDF
function previewPDF(url) {
    window.open(url, '_blank');
}

// Drag and drop functionality
const uploadArea = document.querySelector('.upload-area');

uploadArea.addEventListener('dragover', function(e) {
    e.preventDefault();
    uploadArea.style.borderColor = '#667eea';
    uploadArea.style.background = '#f0f4ff';
});

uploadArea.addEventListener('dragleave', function(e) {
    e.preventDefault();
    uploadArea.style.borderColor = '#ddd';
    uploadArea.style.background = '#f9f9f9';
});

uploadArea.addEventListener('drop', function(e) {
    e.preventDefault();
    uploadArea.style.borderColor = '#ddd';
    uploadArea.style.background = '#f9f9f9';
    
    const files = e.dataTransfer.files;
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    for (let i = 0; i < files.length; i++) {
        addSingleFile(files[i]);
    }
});
